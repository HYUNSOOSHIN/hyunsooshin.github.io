{"version":3,"file":"component---src-pages-blog-jsx-a8d0a900a6eab339df72.js","mappings":"mJAyBA,IAvBYA,IAEJC,EAAAA,cAAA,OAAKC,UAAU,YACXD,EAAAA,cAAA,OAAKE,IAAK,sBAAuBC,IAAI,WACrCH,EAAAA,cAAA,OAAKC,UAAU,aACXD,EAAAA,cAAA,KAAGC,UAAU,QAAO,eACpBD,EAAAA,cAAA,KAAGC,UAAU,SAAQ,kBACrBD,EAAAA,cAAA,OAAKC,UAAU,aACXD,EAAAA,cAAA,KAAGI,KAAK,iCAAiCC,OAAO,SAASC,IAAI,cAAa,UAG1EN,EAAAA,cAAA,KAAGI,KAAK,uCAAuCC,OAAO,SAASC,IAAI,cAAa,cAGhFN,EAAAA,cAAA,KAAGI,KAAK,2BAA2BC,OAAO,SAASC,IAAI,cAAa,Y,8FCiDxF,UA1DiBC,IAAyB,IAADC,EAAA,IAAvB,KAAEC,EAAI,SAAEC,GAAUH,EAChC,MACMI,EADkB,IAAIC,gBAAgBF,EAASG,QACnBC,IAAI,OAEhCC,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAA6B,MAAbP,EAAoBI,EAAQA,EAAMI,QAAQC,IAAUA,EAAKC,YAAYC,MAAQ,IAAIC,SAASZ,KAC1Ga,EAAeC,MAAMC,KAAK,IAAIC,KAAInB,EAAA,IAAGoB,OAAMC,MAAArB,GAAAsB,EAAAA,EAAAA,GAAIf,EAAMgB,KAAKX,GAASA,EAAKC,YAAYC,MAAQ,SAElG,OACItB,EAAAA,cAACgC,EAAAA,EAAM,CAACC,MAAO,QACXjC,EAAAA,cAACkC,EAAAA,EAAG,CAACD,MAAM,SACXjC,EAAAA,cAAA,OAAKmC,GAAG,kBACJnC,EAAAA,cAACD,EAAAA,EAAG,MACJC,EAAAA,cAAA,aACIA,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAACoC,EAAAA,KAAI,CAACnC,UAAwB,MAAbU,EAAoB,SAAW,GAAI0B,GAAK,SAAQ,OAGhEb,EAAaO,KAAI,CAACO,EAAKC,IACpBvC,EAAAA,cAACoC,EAAAA,KAAI,CAACI,IAAKF,EAAMC,EAAUtC,UAAWU,GAAa2B,EAAM,SAAW,GAAID,GAAK,aAAYC,KACpFA,MAIbtC,EAAAA,cAAA,MAAIC,UAAU,kBACTiB,EAAca,KAAKX,IAChB,MAAMa,EAAQb,EAAKC,YAAYY,OAASb,EAAKqB,OAAOC,KAC9CC,EAAcvB,EAAKC,YAAYsB,aAAevB,EAAKwB,QACnDtB,EAAOF,EAAKC,YAAYC,MAAQ,GAEtC,OACItB,EAAAA,cAAA,MAAIwC,IAAKpB,EAAKqB,OAAOC,KAAMzC,UAAU,kBACjCD,EAAAA,cAACoC,EAAAA,KAAI,CAACC,GAAIjB,EAAKqB,OAAOC,MAClB1C,EAAAA,cAAA,UAAKiC,IAGTjC,EAAAA,cAAA,KAAGC,UAAU,QAAQmB,EAAKC,YAAYwB,MACrCvB,EAAKwB,OAAS,GACX9C,EAAAA,cAAA,MAAIC,UAAU,YACTqB,EAAKS,KAAI,CAACO,EAAKS,IACZ/C,EAAAA,cAAA,MAAIwC,IAAKF,EAAMS,GACX/C,EAAAA,cAAA,cAASsC,OAKzBtC,EAAAA,cAACoC,EAAAA,KAAI,CAACC,GAAIjB,EAAKqB,OAAOC,MAClB1C,EAAAA,cAAA,KAAGC,UAAU,cAAc+C,wBAAyB,CAAEC,OAAQN,MAEjE,MAKhB,C","sources":["webpack://gatsby-starter-default/./src/components/bio.jsx","webpack://gatsby-starter-default/./src/pages/blog.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Bio = () => {\r\n    return (\r\n        <div className=\"bio-card\">\r\n            <img src={\"/images/hyunsoo.jpg\"} alt=\"my img\" />\r\n            <div className=\"text-view\">\r\n                <p className=\"name\">HYUNSOOSHIN</p>\r\n                <p className=\"intro\">안녕하세요. 신현수입니다.</p>\r\n                <div className=\"link-view\">\r\n                    <a href=\"https://github.com/HYUNSOOSHIN\" target=\"_blank\" rel=\"noreferrer\">\r\n                        Github\r\n                    </a>\r\n                    <a href=\"https://instagram.com/hyunsoooooshin\" target=\"_blank\" rel=\"noreferrer\">\r\n                        Instargram\r\n                    </a>\r\n                    <a href=\"mailto:shs0655@gmail.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                        E-mail\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Bio;\r\n","/* eslint-disable react/prop-types */\r\nimport * as React from \"react\";\r\nimport { Link, graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport Seo from \"../components/seo\";\r\nimport Bio from \"../components/bio\";\r\n\r\nconst BlogPage = ({ data, location }) => {\r\n    const urlSearchParams = new URLSearchParams(location.search);\r\n    const tagFilter = urlSearchParams.get(\"tag\");\r\n\r\n    const posts = data.allMarkdownRemark.nodes;\r\n    const filteredPosts = tagFilter == null ? posts : posts.filter((post) => (post.frontmatter.tags || []).includes(tagFilter));\r\n    const filteredTags = Array.from(new Set([].concat(...posts.map((post) => post.frontmatter.tags || []))));\r\n\r\n    return (\r\n        <Layout title={\"Blog\"}>\r\n            <Seo title=\"Blog\" />\r\n            <div id=\"container-blog\">\r\n                <Bio />\r\n                <aside>\r\n                    <h2>Tags</h2>\r\n                    <Link className={tagFilter == null ? \"active\" : \"\"} to={`/blog`}>\r\n                        All\r\n                    </Link>\r\n                    {filteredTags.map((tag, tagIndex) => (\r\n                        <Link key={tag + tagIndex} className={tagFilter == tag ? \"active\" : \"\"} to={`/blog?tag=${tag}`}>\r\n                            {tag}\r\n                        </Link>\r\n                    ))}\r\n                </aside>\r\n                <ol className=\"blog-list-view\">\r\n                    {filteredPosts.map((post) => {\r\n                        const title = post.frontmatter.title || post.fields.slug;\r\n                        const description = post.frontmatter.description || post.excerpt;\r\n                        const tags = post.frontmatter.tags || [];\r\n\r\n                        return (\r\n                            <li key={post.fields.slug} className=\"blog-list-item\">\r\n                                <Link to={post.fields.slug}>\r\n                                    <h2>{title}</h2>\r\n                                </Link>\r\n\r\n                                <p className=\"date\">{post.frontmatter.date}</p>\r\n                                {tags.length > 0 && (\r\n                                    <ul className=\"tag-list\">\r\n                                        {tags.map((tag, tabIndex) => (\r\n                                            <li key={tag + tabIndex}>\r\n                                                <button>{tag}</button>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                )}\r\n                                <Link to={post.fields.slug}>\r\n                                    <p className=\"description\" dangerouslySetInnerHTML={{ __html: description }} />\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default BlogPage;\r\n\r\nexport const pageQuery = graphql`\r\n    query {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n            nodes {\r\n                excerpt(pruneLength: 160, truncate: true)\r\n                fields {\r\n                    slug\r\n                }\r\n                frontmatter {\r\n                    date(formatString: \"YYYY.MM.DD\")\r\n                    title\r\n                    description\r\n                    tags\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n"],"names":["Bio","React","className","src","alt","href","target","rel","_ref","_ref2","data","location","tagFilter","URLSearchParams","search","get","posts","allMarkdownRemark","nodes","filteredPosts","filter","post","frontmatter","tags","includes","filteredTags","Array","from","Set","concat","apply","_toConsumableArray","map","Layout","title","Seo","id","Link","to","tag","tagIndex","key","fields","slug","description","excerpt","date","length","tabIndex","dangerouslySetInnerHTML","__html"],"sourceRoot":""}